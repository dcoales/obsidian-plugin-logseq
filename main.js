'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var TaskType;
(function (TaskType) {
    TaskType[TaskType["TODO"] = 0] = "TODO";
    TaskType[TaskType["DONE"] = 1] = "DONE";
    TaskType[TaskType["DOING"] = 2] = "DOING";
    TaskType[TaskType["LATER"] = 3] = "LATER";
    TaskType[TaskType["CANCELED"] = 4] = "CANCELED";
    TaskType[TaskType["UNKNOWN"] = 5] = "UNKNOWN";
})(TaskType || (TaskType = {}));
var HEADING_REGEX = {
    h1: /(?:\s+)?- # (?:.*)$/gms,
    h2: /(?:\s+)?- ## (?:.*)$/gms,
    h3: /(?:\s+)?- ### (?:.*)$/gms,
    h4: /(?:\s+)?- #### (?:.*)$/gms,
    h5: /(?:\s+)?- ##### (?:.*)$/gms,
};
var VERSION = "0.0.3";
function parseTaskType(content) {
    if (content.startsWith("DONE ")) {
        return TaskType.DONE;
    }
    else if (content.startsWith("TODO ")) {
        return TaskType.TODO;
    }
    else if (content.startsWith("DOING ")) {
        return TaskType.DOING;
    }
    else if (content.startsWith("LATER ")) {
        return TaskType.LATER;
    }
    else if (content.startsWith("CANCELED ")) {
        return TaskType.CANCELED;
    }
    else {
        return TaskType.UNKNOWN;
    }
}
function removeTimestamps(content) {
    return content
        .replace(/doing:: (?:\d{13})/gms, "")
        .replace(/done:: (?:\d{13})/gms, "")
        .replace(/todo:: (?:\d{13})/gms, "")
        .replace(/doing:: (?:\d{13})/gms, "")
        .replace(/later:: (?:\d{13})/gms, "")
        .replace(/canceled:: (?:\d{13})/gms, "")
        .replace(/id:: (?:[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12})/gims, "")
        .replace(/collapsed:: (?:true|false)/gms, "")
        .replace("<br>", "");
}
var blockTest = new RegExp(/\#\+BEGIN_(WARNING|IMPORTANT|QUOTE|CAUTION)/gms);
function isBlock(content) {
    return blockTest.test(content);
}
function cmHeadingOverlay(cm) {
    cm.addOverlay({
        token: function (stream) {
            if (stream.match(HEADING_REGEX["h1"])) {
                return "header-1";
            }
            else if (stream.match(HEADING_REGEX["h2"])) {
                return "header-2";
            }
            else if (stream.match(HEADING_REGEX["h3"])) {
                return "header-3";
            }
            else if (stream.match(HEADING_REGEX["h4"])) {
                return "header-4";
            }
            else if (stream.match(HEADING_REGEX["h5"])) {
                return "header-5";
            }
            else {
                stream.next();
            }
        },
    });
}
var LogSeqPlugin = /** @class */ (function (_super) {
    __extends(LogSeqPlugin, _super);
    function LogSeqPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LogSeqPlugin.prototype.onload = function () {
        console.log("Loading LogSeq plugin " + VERSION);
        obsidian.MarkdownPreviewRenderer.registerPostProcessor(LogSeqPlugin.postprocessor);
        // Style headings in source editing
        this.registerCodeMirror(cmHeadingOverlay);
    };
    LogSeqPlugin.prototype.onunload = function () {
        console.log("unloading LogSeq plugin " + VERSION);
        obsidian.MarkdownPreviewRenderer.unregisterPostProcessor(LogSeqPlugin.postprocessor);
    };
    LogSeqPlugin.postprocessor = function (el, ctx) {
        var entries = el.querySelectorAll("li[data-line]");
        entries.forEach(function (entry) {
            var taskType = parseTaskType(entry.textContent);
            // Check if the entry is a org-mode block
            if (isBlock(entry.innerHTML)) {
                var replacedBlock = entry.innerHTML.replace(/\#\+BEGIN_(WARNING|IMPORTANT|QUOTE|CAUTION)/, "<blockquote> &#9759;");
                replacedBlock = replacedBlock.replace(/\#\+END_(WARNING|IMPORTANT|QUOTE|CAUTION)/, "</blockquote>");
                entry.innerHTML = replacedBlock;
            }
            if (taskType == TaskType.DONE) {
                var replacedHTML = removeTimestamps(entry.innerHTML.replace("DONE", ""));
                entry.innerHTML = "<span class=\"logseq-done-task\"><input type=\"checkbox\" checked> " + replacedHTML + "</span>";
            }
            else if (taskType == TaskType.TODO) {
                var replacedHTML = removeTimestamps(entry.innerHTML.replace("TODO", ""));
                entry.innerHTML = "<input type=\"checkbox\"> <span class=\"logseq-status-task\">TODO</span> " + replacedHTML;
            }
            else if (taskType == TaskType.DOING) {
                var replacedHTML = removeTimestamps(entry.innerHTML.replace("DOING", ""));
                entry.innerHTML = "<input type=\"checkbox\"> <span class=\"logseq-status-task\">DOING</span> " + replacedHTML;
            }
            else if (taskType == TaskType.LATER) {
                var replacedHTML = removeTimestamps(entry.innerHTML.replace("LATER", ""));
                entry.innerHTML = "<input type=\"checkbox\"> <span class=\"logseq-status-task\">LATER</span> " + replacedHTML;
            }
            else if (taskType == TaskType.CANCELED) {
                var replacedHTML = removeTimestamps(entry.innerHTML.replace("CANCELED", ""));
                entry.innerHTML = "<span class=\"logseq-done-task\">" + replacedHTML + "</span>";
            }
        });
    };
    return LogSeqPlugin;
}(obsidian.Plugin));

module.exports = LogSeqPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
